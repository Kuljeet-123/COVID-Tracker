{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\Web Projects\\\\COVID-Tracker\\\\COVID-Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\Web Projects\\\\COVID-Tracker\\\\COVID-Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:\\\\Web Projects\\\\COVID-Tracker\\\\COVID-Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Line,HorizontalBar}from'react-chartjs-2';import{fetchDailyData}from'./../../api';import styles from'./Chart.module.css';var Chart=function Chart(_ref){var dataset=_ref.dataset,country=_ref.country;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){function loadData(){return _loadData.apply(this,arguments);}function _loadData(){_loadData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchDailyData();case 2:data=_context.sent;setDailyData(data);case 4:case\"end\":return _context.stop();}}},_callee);}));return _loadData.apply(this,arguments);}loadData();},[]);var barChart=dataset.confirmed?/*#__PURE__*/React.createElement(HorizontalBar,{data:{labels:['Infected','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['rgba(164, 17, 184, 0.5)','rgba(39, 145, 13, 0.5)','rgba(255, 0, 0, 0.5)'],data:[dataset.confirmed.value,dataset.recovered.value,dataset.deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Current state in \".concat(country)}}}):null;var lineChart=dailyData[0]?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref2){var date=_ref2.date;return date;}),datasets:[{data:dailyData.map(function(data){return data.confirmed;}),label:'Infected',borderColor:'#a411b880',fill:true},{data:dailyData.map(function(data){return data.deaths;}),label:'Deaths',borderColor:'#ff000080',backgroundColor:'rgba(255, 0, 0, 0.5)',fill:true}]}}):null;return/*#__PURE__*/React.createElement(\"div\",{className:styles.container},country!=='Global'?barChart:lineChart);};export default Chart;","map":{"version":3,"sources":["D:/Web Projects/COVID-Tracker/COVID-Tracker/src/components/Chart/Chart.jsx"],"names":["React","useEffect","useState","Line","HorizontalBar","fetchDailyData","styles","Chart","dataset","country","dailyData","setDailyData","loadData","data","barChart","confirmed","labels","datasets","label","backgroundColor","value","recovered","deaths","legend","display","title","text","lineChart","map","date","borderColor","fill","container"],"mappings":"2fAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,IAAT,CAAeC,aAAf,KAAoC,iBAApC,CACA,OAAQC,cAAR,KAA6B,aAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAuB,IAArBC,CAAAA,OAAqB,MAArBA,OAAqB,CAAbC,OAAa,MAAbA,OAAa,eACAP,QAAQ,CAAC,EAAD,CADR,wCAC1BQ,SAD0B,eAChBC,YADgB,eAEjCV,SAAS,CAAC,UAAI,SACKW,CAAAA,QADL,kIACV,kKACuBP,CAAAA,cAAc,EADrC,QACUQ,IADV,eAEIF,YAAY,CAACE,IAAD,CAAZ,CAFJ,sDADU,2CAKVD,QAAQ,GAEX,CAPQ,CAOP,EAPO,CAAT,CASA,GAAME,CAAAA,QAAQ,CAEVN,OAAO,CAACO,SAAR,cACI,oBAAC,aAAD,EACE,IAAI,CAAE,CACJC,MAAM,CAAE,CAAC,UAAD,CAAa,WAAb,CAA0B,QAA1B,CADJ,CAEJC,QAAQ,CAAE,CACR,CACEC,KAAK,CAAE,QADT,CAEEC,eAAe,CAAE,CAAC,yBAAD,CAA4B,wBAA5B,CAAsD,sBAAtD,CAFnB,CAGEN,IAAI,CAAE,CAACL,OAAO,CAACO,SAAR,CAAkBK,KAAnB,CAA0BZ,OAAO,CAACa,SAAR,CAAkBD,KAA5C,CAAmDZ,OAAO,CAACc,MAAR,CAAeF,KAAlE,CAHR,CADQ,CAFN,CADR,CAWE,OAAO,CAAE,CACPG,MAAM,CAAE,CAAEC,OAAO,CAAE,KAAX,CADD,CAEPC,KAAK,CAAE,CAAED,OAAO,CAAE,IAAX,CAAiBE,IAAI,4BAAsBjB,OAAtB,CAArB,CAFA,CAXX,EADJ,CAiBC,IAnBL,CAsBA,GAAMkB,CAAAA,SAAS,CACXjB,SAAS,CAAC,CAAD,CAAT,cACE,oBAAC,IAAD,EACE,IAAI,CAAE,CACJM,MAAM,CAAEN,SAAS,CAACkB,GAAV,CAAc,mBAAGC,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAd,EAAd,CADJ,CAEJZ,QAAQ,CAAE,CAAC,CACTJ,IAAI,CAAEH,SAAS,CAACkB,GAAV,CAAc,SAACf,IAAD,QAAUA,CAAAA,IAAI,CAACE,SAAf,EAAd,CADG,CAETG,KAAK,CAAE,UAFE,CAGTY,WAAW,CAAE,WAHJ,CAITC,IAAI,CAAE,IAJG,CAAD,CAKP,CACDlB,IAAI,CAAEH,SAAS,CAACkB,GAAV,CAAc,SAACf,IAAD,QAAUA,CAAAA,IAAI,CAACS,MAAf,EAAd,CADL,CAEDJ,KAAK,CAAE,QAFN,CAGDY,WAAW,CAAE,WAHZ,CAIDX,eAAe,CAAE,sBAJhB,CAKDY,IAAI,CAAE,IALL,CALO,CAFN,CADR,EADF,CAmBI,IApBR,CAuBA,mBACI,2BAAK,SAAS,CAAEzB,MAAM,CAAC0B,SAAvB,EACKvB,OAAO,GAAG,QAAV,CAAqBK,QAArB,CAAgCa,SADrC,CADJ,CAQH,CAhED,CAkEA,cAAepB,CAAAA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line, HorizontalBar } from 'react-chartjs-2';\r\nimport {fetchDailyData} from './../../api'\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({dataset,country}) => {\r\n    const [dailyData,setDailyData] = useState({});\r\n    useEffect(()=>{\r\n        async function loadData() {\r\n            const data = await fetchDailyData();\r\n            setDailyData(data);\r\n        }\r\n        loadData();\r\n      \r\n    },[]);\r\n\r\n    const barChart = (\r\n\r\n        dataset.confirmed ? \r\n            <HorizontalBar\r\n              data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [\r\n                  {\r\n                    label: 'People',\r\n                    backgroundColor: ['rgba(164, 17, 184, 0.5)', 'rgba(39, 145, 13, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                    data: [dataset.confirmed.value, dataset.recovered.value, dataset.deaths.value],\r\n                  },\r\n                ],\r\n              }}\r\n              options={{\r\n                legend: { display: false },\r\n                title: { display: true, text: `Current state in ${country}` },\r\n              }}\r\n            />\r\n        :null\r\n    )\r\n\r\n    const lineChart = (\r\n        dailyData[0] ? (\r\n          <Line\r\n            data={{\r\n              labels: dailyData.map(({ date }) => date),\r\n              datasets: [{\r\n                data: dailyData.map((data) => data.confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#a411b880',\r\n                fill: true,\r\n              }, {\r\n                data: dailyData.map((data) => data.deaths),\r\n                label: 'Deaths',\r\n                borderColor: '#ff000080',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                fill: true,\r\n              },\r\n              ],\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country!=='Global' ? barChart : lineChart}\r\n        </div>\r\n        \r\n       \r\n       \r\n    );\r\n}\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}